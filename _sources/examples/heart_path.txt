
.. _heart_path:


Patches and Paths
=================
This is a demo adapted from a `matplotlib gallery example
<http://matplotlib.org/examples/shapes_and_collections/path_patch_demo.html>`_

This example adds a custom D3 plugin allowing the user to drag the path
control-points and see the effect on the path.

Use the toolbar buttons at the bottom-right of the plot to enable zooming
and panning, and to reset the view.


.. raw:: html
    
    
    <style>
    
    </style>
    
    <div id="fig_el538247566031794512391700174"></div>
    <script>
    function mpld3_load_lib(url, callback){
      var s = document.createElement('script');
      s.src = url;
      s.async = true;
      s.onreadystatechange = s.onload = callback;
      s.onerror = function(){console.warn("failed to load library " + url);};
      document.getElementsByTagName("head")[0].appendChild(s);
    }
    
    if(typeof(mpld3) !== "undefined" && mpld3._mpld3IsLoaded){
       // already loaded: just create the figure
       !function(mpld3){
           
        mpld3.register_plugin("drag", DragPlugin);
        DragPlugin.prototype = Object.create(mpld3.Plugin.prototype);
        DragPlugin.prototype.constructor = DragPlugin;
        DragPlugin.prototype.requiredProps = ["idpts", "idline", "idpatch"];
        DragPlugin.prototype.defaultProps = {}
        function DragPlugin(fig, props){
            mpld3.Plugin.call(this, fig, props);
        };
    
        DragPlugin.prototype.draw = function(){
            var patchobj = mpld3.get_element(this.props.idpatch, this.fig);
            var ptsobj = mpld3.get_element(this.props.idpts, this.fig);
            var lineobj = mpld3.get_element(this.props.idline, this.fig);
    
            var drag = d3.behavior.drag()
                .origin(function(d) { return {x:ptsobj.ax.x(d[0]),
                                              y:ptsobj.ax.y(d[1])}; })
                .on("dragstart", dragstarted)
                .on("drag", dragged)
                .on("dragend", dragended);
    
            lineobj.path.attr("d", lineobj.datafunc(ptsobj.offsets));
            patchobj.path.attr("d", patchobj.datafunc(ptsobj.offsets,
                                                      patchobj.pathcodes));
            lineobj.data = ptsobj.offsets;
            patchobj.data = ptsobj.offsets;
    
            ptsobj.elements()
               .data(ptsobj.offsets)
               .style("cursor", "default")
               .call(drag);
    
            function dragstarted(d) {
              d3.event.sourceEvent.stopPropagation();
              d3.select(this).classed("dragging", true);
            }
    
            function dragged(d, i) {
              d[0] = ptsobj.ax.x.invert(d3.event.x);
              d[1] = ptsobj.ax.y.invert(d3.event.y);
              d3.select(this)
                .attr("transform", "translate(" + [d3.event.x,d3.event.y] + ")");
              lineobj.path.attr("d", lineobj.datafunc(ptsobj.offsets));
              patchobj.path.attr("d", patchobj.datafunc(ptsobj.offsets,
                                                        patchobj.pathcodes));
            }
    
            function dragended(d, i) {
              d3.select(this).classed("dragging", false);
            }
        }
    
        mpld3.register_plugin("drag", DragPlugin);
        
           mpld3.draw_figure("fig_el538247566031794512391700174", {"axes": [{"xlim": [-4.020833333333333, 5.020833333333333], "yscale": "linear", "axesbg": "#FFFFFF", "texts": [{"v_baseline": "auto", "h_anchor": "middle", "color": "#000000", "text": "Drag Points to Change Path", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 18.0, "position": [0.5, 1.0144675925925926], "rotation": -0.0, "id": "el538247566171397904"}], "zoomable": true, "images": [], "xdomain": [-4.020833333333333, 5.020833333333333], "ylim": [-3.0, 4.0], "paths": [{"edgecolor": "#000000", "facecolor": "#FF0000", "edgewidth": 1.0, "pathcodes": ["M", "C", "L", "C", "Z"], "yindex": 1, "coordinates": "data", "dasharray": "none", "zorder": 1, "alpha": 0.5, "xindex": 0, "data": "data01", "id": "el538247566031967312"}], "sharey": [], "sharex": [], "axesbgalpha": null, "axes": [{"scale": "linear", "tickformat": null, "grid": {"color": "#808080", "alpha": 0.5, "dasharray": "2,2", "gridOn": true}, "visible": true, "fontsize": 12.0, "position": "bottom", "nticks": 7, "tickvalues": null}, {"scale": "linear", "tickformat": null, "grid": {"color": "#808080", "alpha": 0.5, "dasharray": "2,2", "gridOn": true}, "visible": true, "fontsize": 12.0, "position": "left", "nticks": 8, "tickvalues": null}], "lines": [{"drawstyle": "default", "color": "#000000", "yindex": 1, "coordinates": "data", "dasharray": "none", "zorder": 2, "alpha": 1, "xindex": 0, "linewidth": 1.0, "data": "data01", "id": "el538247566048118160"}], "markers": [{"edgecolor": "#000000", "facecolor": "#007F00", "edgewidth": 0.5, "yindex": 1, "coordinates": "data", "zorder": 2, "markerpath": [[[0.0, 5.0], [1.3260155, 5.0], [2.597899353924267, 4.473168457941209], [3.5355339059327378, 3.5355339059327378], [4.473168457941209, 2.597899353924267], [5.0, 1.3260155], [5.0, 0.0], [5.0, -1.3260155], [4.473168457941209, -2.597899353924267], [3.5355339059327378, -3.5355339059327378], [2.597899353924267, -4.473168457941209], [1.3260155, -5.0], [0.0, -5.0], [-1.3260155, -5.0], [-2.597899353924267, -4.473168457941209], [-3.5355339059327378, -3.5355339059327378], [-4.473168457941209, -2.597899353924267], [-5.0, -1.3260155], [-5.0, 0.0], [-5.0, 1.3260155], [-4.473168457941209, 2.597899353924267], [-3.5355339059327378, 3.5355339059327378], [-2.597899353924267, 4.473168457941209], [-1.3260155, 5.0], [0.0, 5.0]], ["M", "C", "C", "C", "C", "C", "C", "C", "C", "Z"]], "alpha": 1, "xindex": 0, "data": "data01", "id": "el538247566048117200pts"}], "id": "el538247566028071888", "ydomain": [-3.0, 4.0], "collections": [], "xscale": "linear", "bbox": [0.125, 0.099999999999999978, 0.77500000000000002, 0.80000000000000004]}], "height": 480.0, "width": 640.0, "plugins": [{"type": "reset"}, {"enabled": false, "button": true, "type": "zoom"}, {"enabled": false, "button": true, "type": "boxzoom"}, {"idpatch": "el538247566031967312", "idline": "el538247566048118160", "type": "drag", "idpts": "el538247566048117200pts"}], "data": {"data01": [[1.58, -2.57], [0.35, -1.1], [-1.75, 2.0], [0.375, 2.0], [0.85, 1.15], [2.2, 3.2], [3.0, 0.05], [2.0, -0.5]]}, "id": "el538247566031794512"});
       }(mpld3);
    }else if(typeof define === "function" && define.amd){
       // require.js is available: use it to load d3/mpld3
       require.config({paths: {d3: "https://mpld3.github.io/js/d3.v3.min"}});
       require(["d3"], function(d3){
          window.d3 = d3;
          mpld3_load_lib("https://mpld3.github.io/js/mpld3.v0.3.js", function(){
             
        mpld3.register_plugin("drag", DragPlugin);
        DragPlugin.prototype = Object.create(mpld3.Plugin.prototype);
        DragPlugin.prototype.constructor = DragPlugin;
        DragPlugin.prototype.requiredProps = ["idpts", "idline", "idpatch"];
        DragPlugin.prototype.defaultProps = {}
        function DragPlugin(fig, props){
            mpld3.Plugin.call(this, fig, props);
        };
    
        DragPlugin.prototype.draw = function(){
            var patchobj = mpld3.get_element(this.props.idpatch, this.fig);
            var ptsobj = mpld3.get_element(this.props.idpts, this.fig);
            var lineobj = mpld3.get_element(this.props.idline, this.fig);
    
            var drag = d3.behavior.drag()
                .origin(function(d) { return {x:ptsobj.ax.x(d[0]),
                                              y:ptsobj.ax.y(d[1])}; })
                .on("dragstart", dragstarted)
                .on("drag", dragged)
                .on("dragend", dragended);
    
            lineobj.path.attr("d", lineobj.datafunc(ptsobj.offsets));
            patchobj.path.attr("d", patchobj.datafunc(ptsobj.offsets,
                                                      patchobj.pathcodes));
            lineobj.data = ptsobj.offsets;
            patchobj.data = ptsobj.offsets;
    
            ptsobj.elements()
               .data(ptsobj.offsets)
               .style("cursor", "default")
               .call(drag);
    
            function dragstarted(d) {
              d3.event.sourceEvent.stopPropagation();
              d3.select(this).classed("dragging", true);
            }
    
            function dragged(d, i) {
              d[0] = ptsobj.ax.x.invert(d3.event.x);
              d[1] = ptsobj.ax.y.invert(d3.event.y);
              d3.select(this)
                .attr("transform", "translate(" + [d3.event.x,d3.event.y] + ")");
              lineobj.path.attr("d", lineobj.datafunc(ptsobj.offsets));
              patchobj.path.attr("d", patchobj.datafunc(ptsobj.offsets,
                                                        patchobj.pathcodes));
            }
    
            function dragended(d, i) {
              d3.select(this).classed("dragging", false);
            }
        }
    
        mpld3.register_plugin("drag", DragPlugin);
        
             mpld3.draw_figure("fig_el538247566031794512391700174", {"axes": [{"xlim": [-4.020833333333333, 5.020833333333333], "yscale": "linear", "axesbg": "#FFFFFF", "texts": [{"v_baseline": "auto", "h_anchor": "middle", "color": "#000000", "text": "Drag Points to Change Path", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 18.0, "position": [0.5, 1.0144675925925926], "rotation": -0.0, "id": "el538247566171397904"}], "zoomable": true, "images": [], "xdomain": [-4.020833333333333, 5.020833333333333], "ylim": [-3.0, 4.0], "paths": [{"edgecolor": "#000000", "facecolor": "#FF0000", "edgewidth": 1.0, "pathcodes": ["M", "C", "L", "C", "Z"], "yindex": 1, "coordinates": "data", "dasharray": "none", "zorder": 1, "alpha": 0.5, "xindex": 0, "data": "data01", "id": "el538247566031967312"}], "sharey": [], "sharex": [], "axesbgalpha": null, "axes": [{"scale": "linear", "tickformat": null, "grid": {"color": "#808080", "alpha": 0.5, "dasharray": "2,2", "gridOn": true}, "visible": true, "fontsize": 12.0, "position": "bottom", "nticks": 7, "tickvalues": null}, {"scale": "linear", "tickformat": null, "grid": {"color": "#808080", "alpha": 0.5, "dasharray": "2,2", "gridOn": true}, "visible": true, "fontsize": 12.0, "position": "left", "nticks": 8, "tickvalues": null}], "lines": [{"drawstyle": "default", "color": "#000000", "yindex": 1, "coordinates": "data", "dasharray": "none", "zorder": 2, "alpha": 1, "xindex": 0, "linewidth": 1.0, "data": "data01", "id": "el538247566048118160"}], "markers": [{"edgecolor": "#000000", "facecolor": "#007F00", "edgewidth": 0.5, "yindex": 1, "coordinates": "data", "zorder": 2, "markerpath": [[[0.0, 5.0], [1.3260155, 5.0], [2.597899353924267, 4.473168457941209], [3.5355339059327378, 3.5355339059327378], [4.473168457941209, 2.597899353924267], [5.0, 1.3260155], [5.0, 0.0], [5.0, -1.3260155], [4.473168457941209, -2.597899353924267], [3.5355339059327378, -3.5355339059327378], [2.597899353924267, -4.473168457941209], [1.3260155, -5.0], [0.0, -5.0], [-1.3260155, -5.0], [-2.597899353924267, -4.473168457941209], [-3.5355339059327378, -3.5355339059327378], [-4.473168457941209, -2.597899353924267], [-5.0, -1.3260155], [-5.0, 0.0], [-5.0, 1.3260155], [-4.473168457941209, 2.597899353924267], [-3.5355339059327378, 3.5355339059327378], [-2.597899353924267, 4.473168457941209], [-1.3260155, 5.0], [0.0, 5.0]], ["M", "C", "C", "C", "C", "C", "C", "C", "C", "Z"]], "alpha": 1, "xindex": 0, "data": "data01", "id": "el538247566048117200pts"}], "id": "el538247566028071888", "ydomain": [-3.0, 4.0], "collections": [], "xscale": "linear", "bbox": [0.125, 0.099999999999999978, 0.77500000000000002, 0.80000000000000004]}], "height": 480.0, "width": 640.0, "plugins": [{"type": "reset"}, {"enabled": false, "button": true, "type": "zoom"}, {"enabled": false, "button": true, "type": "boxzoom"}, {"idpatch": "el538247566031967312", "idline": "el538247566048118160", "type": "drag", "idpts": "el538247566048117200pts"}], "data": {"data01": [[1.58, -2.57], [0.35, -1.1], [-1.75, 2.0], [0.375, 2.0], [0.85, 1.15], [2.2, 3.2], [3.0, 0.05], [2.0, -0.5]]}, "id": "el538247566031794512"});
          });
        });
    }else{
        // require.js not available: dynamically load d3 & mpld3
        mpld3_load_lib("https://mpld3.github.io/js/d3.v3.min.js", function(){
             mpld3_load_lib("https://mpld3.github.io/js/mpld3.v0.3.js", function(){
                     
        mpld3.register_plugin("drag", DragPlugin);
        DragPlugin.prototype = Object.create(mpld3.Plugin.prototype);
        DragPlugin.prototype.constructor = DragPlugin;
        DragPlugin.prototype.requiredProps = ["idpts", "idline", "idpatch"];
        DragPlugin.prototype.defaultProps = {}
        function DragPlugin(fig, props){
            mpld3.Plugin.call(this, fig, props);
        };
    
        DragPlugin.prototype.draw = function(){
            var patchobj = mpld3.get_element(this.props.idpatch, this.fig);
            var ptsobj = mpld3.get_element(this.props.idpts, this.fig);
            var lineobj = mpld3.get_element(this.props.idline, this.fig);
    
            var drag = d3.behavior.drag()
                .origin(function(d) { return {x:ptsobj.ax.x(d[0]),
                                              y:ptsobj.ax.y(d[1])}; })
                .on("dragstart", dragstarted)
                .on("drag", dragged)
                .on("dragend", dragended);
    
            lineobj.path.attr("d", lineobj.datafunc(ptsobj.offsets));
            patchobj.path.attr("d", patchobj.datafunc(ptsobj.offsets,
                                                      patchobj.pathcodes));
            lineobj.data = ptsobj.offsets;
            patchobj.data = ptsobj.offsets;
    
            ptsobj.elements()
               .data(ptsobj.offsets)
               .style("cursor", "default")
               .call(drag);
    
            function dragstarted(d) {
              d3.event.sourceEvent.stopPropagation();
              d3.select(this).classed("dragging", true);
            }
    
            function dragged(d, i) {
              d[0] = ptsobj.ax.x.invert(d3.event.x);
              d[1] = ptsobj.ax.y.invert(d3.event.y);
              d3.select(this)
                .attr("transform", "translate(" + [d3.event.x,d3.event.y] + ")");
              lineobj.path.attr("d", lineobj.datafunc(ptsobj.offsets));
              patchobj.path.attr("d", patchobj.datafunc(ptsobj.offsets,
                                                        patchobj.pathcodes));
            }
    
            function dragended(d, i) {
              d3.select(this).classed("dragging", false);
            }
        }
    
        mpld3.register_plugin("drag", DragPlugin);
        
                     mpld3.draw_figure("fig_el538247566031794512391700174", {"axes": [{"xlim": [-4.020833333333333, 5.020833333333333], "yscale": "linear", "axesbg": "#FFFFFF", "texts": [{"v_baseline": "auto", "h_anchor": "middle", "color": "#000000", "text": "Drag Points to Change Path", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 18.0, "position": [0.5, 1.0144675925925926], "rotation": -0.0, "id": "el538247566171397904"}], "zoomable": true, "images": [], "xdomain": [-4.020833333333333, 5.020833333333333], "ylim": [-3.0, 4.0], "paths": [{"edgecolor": "#000000", "facecolor": "#FF0000", "edgewidth": 1.0, "pathcodes": ["M", "C", "L", "C", "Z"], "yindex": 1, "coordinates": "data", "dasharray": "none", "zorder": 1, "alpha": 0.5, "xindex": 0, "data": "data01", "id": "el538247566031967312"}], "sharey": [], "sharex": [], "axesbgalpha": null, "axes": [{"scale": "linear", "tickformat": null, "grid": {"color": "#808080", "alpha": 0.5, "dasharray": "2,2", "gridOn": true}, "visible": true, "fontsize": 12.0, "position": "bottom", "nticks": 7, "tickvalues": null}, {"scale": "linear", "tickformat": null, "grid": {"color": "#808080", "alpha": 0.5, "dasharray": "2,2", "gridOn": true}, "visible": true, "fontsize": 12.0, "position": "left", "nticks": 8, "tickvalues": null}], "lines": [{"drawstyle": "default", "color": "#000000", "yindex": 1, "coordinates": "data", "dasharray": "none", "zorder": 2, "alpha": 1, "xindex": 0, "linewidth": 1.0, "data": "data01", "id": "el538247566048118160"}], "markers": [{"edgecolor": "#000000", "facecolor": "#007F00", "edgewidth": 0.5, "yindex": 1, "coordinates": "data", "zorder": 2, "markerpath": [[[0.0, 5.0], [1.3260155, 5.0], [2.597899353924267, 4.473168457941209], [3.5355339059327378, 3.5355339059327378], [4.473168457941209, 2.597899353924267], [5.0, 1.3260155], [5.0, 0.0], [5.0, -1.3260155], [4.473168457941209, -2.597899353924267], [3.5355339059327378, -3.5355339059327378], [2.597899353924267, -4.473168457941209], [1.3260155, -5.0], [0.0, -5.0], [-1.3260155, -5.0], [-2.597899353924267, -4.473168457941209], [-3.5355339059327378, -3.5355339059327378], [-4.473168457941209, -2.597899353924267], [-5.0, -1.3260155], [-5.0, 0.0], [-5.0, 1.3260155], [-4.473168457941209, 2.597899353924267], [-3.5355339059327378, 3.5355339059327378], [-2.597899353924267, 4.473168457941209], [-1.3260155, 5.0], [0.0, 5.0]], ["M", "C", "C", "C", "C", "C", "C", "C", "C", "Z"]], "alpha": 1, "xindex": 0, "data": "data01", "id": "el538247566048117200pts"}], "id": "el538247566028071888", "ydomain": [-3.0, 4.0], "collections": [], "xscale": "linear", "bbox": [0.125, 0.099999999999999978, 0.77500000000000002, 0.80000000000000004]}], "height": 480.0, "width": 640.0, "plugins": [{"type": "reset"}, {"enabled": false, "button": true, "type": "zoom"}, {"enabled": false, "button": true, "type": "boxzoom"}, {"idpatch": "el538247566031967312", "idline": "el538247566048118160", "type": "drag", "idpts": "el538247566048117200pts"}], "data": {"data01": [[1.58, -2.57], [0.35, -1.1], [-1.75, 2.0], [0.375, 2.0], [0.85, 1.15], [2.2, 3.2], [3.0, 0.05], [2.0, -0.5]]}, "id": "el538247566031794512"});
                })
             });
    }
    </script>

**Python source code:** :download:`[download source: heart_path.py]<heart_path.py>`

.. literalinclude:: heart_path.py
    :lines: 13-
