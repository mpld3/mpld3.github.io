
.. _drag_points:


Draggable Points Example
========================
This example shows how a D3 plugin can be created to make plot elements
draggable.  A stopPropagation command is used to allow the drag behavior
and pan/zoom behavior to work in tandem.


.. raw:: html
    
    <style>
    
    </style>
    
    <div id="fig2565943714949927342141704"></div>
    <script>
    function mpld3_load_lib(url, callback){
      var s = document.createElement('script');
      s.src = url;
      s.async = true;
      s.onreadystatechange = s.onload = callback;
      s.onerror = function(){console.warn("failed to load library " + url);};
      document.getElementsByTagName("head")[0].appendChild(s);
    }
    
    function create_fig2565943714949927342141704(){
      
        var DragPlugin = function(fig, prop){
          this.fig = fig;
          this.prop = mpld3.process_props(this, prop, {}, ["id"]);
    
          mpld3.insert_css("#" + fig.figid + " path.dragging",
                           {"fill-opacity": "1.0 !important",
                            "stroke-opacity": "1.0 !important"});
        }
    
        DragPlugin.prototype.draw = function(){
            var obj = mpld3.get_element(this.prop.id);
    
            var drag = d3.behavior.drag()
                .origin(function(d) { return {x:obj.ax.x(d[0]),
                                              y:obj.ax.y(d[1])}; })
                .on("dragstart", dragstarted)
                .on("drag", dragged)
                .on("dragend", dragended);
    
            obj.elements()
               .data(obj.data)
               .style("cursor", "default")
               .call(drag);
    
            function dragstarted(d) {
              d3.event.sourceEvent.stopPropagation();
              d3.select(this).classed("dragging", true);
            }
    
            function dragged(d, i) {
              d[0] = obj.ax.x.invert(d3.event.x);
              d[1] = obj.ax.y.invert(d3.event.y);
              d3.select(this)
                .attr("transform", "translate(" + [d3.event.x,d3.event.y] + ")");
            }
    
            function dragended(d) {
              d3.select(this).classed("dragging", false);
            }
        }
    
        mpld3.register_plugin("drag", DragPlugin);
        
      mpld3.draw_figure("fig2565943714949927342141704", {"width": 640.0, "plugins": [{"type": "drag", "id": "256594374121936pts"}], "axes": [{"xlim": [-2.0, 2.0], "yscale": "linear", "axesbg": "#FFFFFF", "texts": [{"v_baseline": "auto", "h_anchor": "middle", "color": "#000000", "text": "Click and Drag", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 18.0, "position": [0.5, 1.0144675925925926], "rotation": -0.0, "id": "256594371441872"}], "zoomable": true, "images": [], "xdomain": [-2.0, 2.0], "ylim": [-2.0, 1.0], "paths": [], "sharey": [], "sharex": [], "axesbgalpha": null, "axes": [{"grid": {"gridOn": false}, "position": "bottom", "nticks": 9, "tickvalues": null, "tickformat": null}, {"grid": {"gridOn": false}, "position": "left", "nticks": 7, "tickvalues": null, "tickformat": null}], "lines": [], "markers": [{"edgecolor": "#000000", "facecolor": "#FF0000", "edgewidth": 1, "yindex": 1, "coordinates": "data", "zorder": 2, "markerpath": [[[0.0, 25.0], [6.6300775000000005, 25.0], [12.989496769621336, 22.36584228970604], [17.67766952966369, 17.67766952966369], [22.36584228970604, 12.989496769621336], [25.0, 6.6300775000000005], [25.0, 0.0], [25.0, -6.6300775000000005], [22.36584228970604, -12.989496769621336], [17.67766952966369, -17.67766952966369], [12.989496769621336, -22.36584228970604], [6.6300775000000005, -25.0], [0.0, -25.0], [-6.6300775000000005, -25.0], [-12.989496769621336, -22.36584228970604], [-17.67766952966369, -17.67766952966369], [-22.36584228970604, -12.989496769621336], [-25.0, -6.6300775000000005], [-25.0, 0.0], [-25.0, 6.6300775000000005], [-22.36584228970604, 12.989496769621336], [-17.67766952966369, 17.67766952966369], [-12.989496769621336, 22.36584228970604], [-6.6300775000000005, 25.0], [0.0, 25.0]], ["M", "C", "C", "C", "C", "C", "C", "C", "C", "Z"]], "alpha": 0.5, "xindex": 0, "data": "data01", "id": "256594374121936pts"}], "id": "256594374099920", "ydomain": [-2.0, 1.0], "collections": [], "xscale": "linear", "bbox": [0.125, 0.099999999999999978, 0.77500000000000002, 0.80000000000000004]}], "data": {"data01": [[-0.8877857476301128, -0.510805137568873], [-1.980796468223927, -1.180632184122412], [-0.3479121493261526, -0.028182228338654868], [0.15634896910398005, 0.42833187053041766], [1.2302906807277207, 0.06651722238316789], [1.2023798487844113, 0.3024718977397814], [-0.3873268174079523, -0.6343220936809636], [-0.30230275057533557, -0.3627411659871381], [-1.0485529650670926, -0.672460447775951], [-1.4200179371789752, -0.3595531615405413], [-1.7062701906250126, -0.813146282044454], [1.9507753952317897, -1.7262826023316769], [-0.5096521817516535, 0.17742614225375283], [-0.4380743016111864, -0.4017809362082619], [-1.2527953600499262, -1.6301983469660446], [0.7774903558319101, 0.4627822555257742], [-1.6138978475579515, -0.9072983643832422], [-0.2127402802139687, 0.05194539579613895], [-0.8954665611936756, 0.7290905621775369], [0.386902497859262, 0.12898291075741067]]}, "id": "256594371494992", "toolbar": ["reset", "move"], "height": 480.0});
    }
    
    if(typeof(mpld3) !== "undefined"){
       // already loaded: just create the figure
       create_fig2565943714949927342141704();
    }else if(typeof define === "function" && define.amd){
       // require.js is available: use it to load d3/mpld3
       require.config({paths: {d3: "http://d3js.org/d3.v3.min"}});
       require(["d3"], function(d3){
          window.d3 = d3;
          mpld3_load_lib("http://mpld3.github.io/js/mpld3.v0.1.js", create_fig2565943714949927342141704);
        });
    }else{
        // require.js not available: dynamically load d3 & mpld3
        mpld3_load_lib("http://d3js.org/d3.v3.min.js", function(){
            mpld3_load_lib("http://mpld3.github.io/js/mpld3.v0.1.js", create_fig2565943714949927342141704);})
    }
    </script>

**Python source code:** :download:`[download source: drag_points.py]<drag_points.py>`

.. literalinclude:: drag_points.py
    :lines: 8-
